// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // url      = "file:./test.db"
}

model AuthUser {
  id           String        @id @unique
  auth_session AuthSession[]
  auth_key     AuthKey[]
  // here you can add custom fields for your user
  // e.g. name, email, username, roles, etc.
  firstName    String?
  lastName     String?
  username     String        @unique
  email        String        @unique
  members      Member[]

  @@map("auth_user")
}

model AuthSession {
  id             String   @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  auth_user      AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_session")
}

model AuthKey {
  id              String   @id @unique
  hashed_password String?
  user_id         String
  primary_key     Boolean
  expires         BigInt?
  auth_user       AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_key")
}

model Project {
  id          String  @id @unique @default(cuid())
  // members     Members[]
  title       String
  description String
  issues      Issue[]

  members Member[]
}

model Issue {
  id              String   @id @unique @default(cuid())
  title           String
  content         String
  priority        Priority @default(HIGH)
  project         Project  @relation(fields: [projectId], references: [id])
  projectId       String
  assigned        Member   @relation(fields: [memberProjectId, memberUserId], references: [projectId, authUserId])
  memberProjectId String
  memberUserId    String
}

model Member {
  user AuthUser @relation(fields: [authUserId], references: [id])

  projectId  String
  project    Project @relation(fields: [projectId], references: [id])
  authUserId String
  issues     Issue[]
  role       Roles   @default(USER)

  @@id([projectId, authUserId])
}

// model UserOnProject {
//   id        String   @id @unique @default(cuid())
//   user      AuthUser @relation(references: [id], fields: [userId])
//   userId    String
//   Project   Project? @relation(fields: [projectId], references: [id])
//   projectId String?
//   role      Roles    @default(USER)
//   issues    Issue[]
// }

enum Roles {
  ADMIN
  MODERATOR
  USER
}

enum Priority {
  EXTREME
  HIGH
  MEDIUM
  LOW
}
